'fileTypes': [
  'd'
]
'name': 'D'
'scopeName': 'source.d'
'patterns': [
  {
    'include': '#attributes'
  }
  {
    'include': '#comments'
  }
  {
    'include': '#constants-and-special-vars'
  }
]
'repository':
  'attributes':
    'patterns': [
      {
        'match': '@\\w*(?:\\((?:\\s*\\w+\\s*,?)+\\)+)?'
        'name': 'storage.modifier.annotation.d'
      }
    ]
  'nesting-comments':
    'patterns': [
      {
        'begin': '/\\+'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.begin.d'
        'end': '\\+/'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.comment.end.d'
        'patterns': [
          {
            'include': '#nesting-comments'
          }
        ]
        'name': 'comment.block.d'
      }
    ]
  'comments':
    'patterns': [
      {
        'include': '#nesting-comments'
      }
      {
        'begin': '/\\*'
        'beginCaptures':
          '0': 'name': 'punctuation.definition.comment.begin.d'
        'end': '\\*/'
        'endCaptures':
          '0': 'name': 'punctuation.definition.comment.end.d'
        'name': 'comment.block.d'
      }
      {
        'begin': '//'
        'beginCaptures':
          '0': 'name': 'punctuation.definition.comment.d'
        'end': '\\n'
        'name': 'comment.line.double-slash.d'
      }
    ]
  'constants-and-special-vars':
    'patterns': [
      {
        'match': '\\b(true|false|null)\\b'
        'name': 'constant.language.d'
      }
      {
        'match': '\\b(this|super)\\b'
        'name': 'variable.language.d'
      }
      {
        'match': '\\b([A-Z][A-Z0-9_]+)(?!\\.classinfo|\\s*\\w+\\s*=)\\b'
        'name': 'constant.other.d'
      }
      {
        'comment': 'decimal integers'
        'match': '\\b(?:0|[1-9][\\d_]*)(?:[LuU]|L[uU]|[uU]L)?(?!\\.)\\b'
        'name': 'constant.numeric.integer.decimal.d'
      }
      {
        'comment': 'binary integers'
        'match': '\\b0[bB][01_]*(?:[iLuU]|L[uU]|[uU]L)?\\b'
        'name': 'constant.numeric.integer.binary.d'
      }
      {
        'comment': 'hex integers'
        'match': '\\b0[xX][\\da-fA-F_]*[\\da-fA-F][\\da-fA-F_]*(?:[iLuU]|L[uU]|[uU]L)?(?!\\.)\\b'
        'name': 'constant.numeric.integer.hex.d'
      }
      {
        'comment': 'decimal floats'
        'match': '\\b((\\d+\\.?\\d*)|(\\.?\\d+))([eE][\\+-]?\\d+)?[ifFL]?\\b'
        'name': 'constant.numeric.float.decimal.d'
      }
      {
        'comment': 'hex floats'
        'match': '\\b0[xX](([\\da-fA-F_]+\\.[\\da-fA-F_]*)|(\\.[\\da-fA-F_]+))[pP][\\+-]?\\d+[ifFL]?\\b'
        'name': 'constant.numeric.float.hex.d'
      }
      {
        'match': "\\'.\\'"
        'name': 'constant.character.d'
      }
      {
        'match': "\\'\\\\.\\'"
        'name': 'constant.character.escape.d'
      }
    ]
